name: CI
on:
  push:
    branches:
      - 'master'
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build

jobs:
  docs:
    name: Docs
    runs-on: ubuntu-latest
    steps:
      - name: Checkhout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.9-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: make setup
      - run: make -C docs html SPHINXOPTS="-W -E"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkhout
        uses: actions/checkout@v2
      - name: Setup Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.9-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - run: make setup
      - run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
         pyver: ['3.8', '3.9', '3.10', '3.11']
         experimental: [false]
         include:
           - pyver: "3.12"
             experimental: true
      fail-fast: true
    continue-on-error: ${{ matrix.experimental }}
    steps:
      - name: Checkhout
        uses: actions/checkout@v2.4.0
      - name: Setup Python ${{ matrix.pyver }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}
          allow-prereleases: true
          cache: 'pip'
          cache-dependency-path: 'requirements/*.txt'
      - name: Install dependencies
        uses: py-actions/py-dependency-install@v4
        with:
          path: requirements/ci.txt
      - name: Run tests
        env:
          PYTHONPATH: .
        run: |
          pytest tests
          python -m coverage xml
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unit

  check:  # This job does nothing and is only used for the branch protection
    if: always()
    needs: [docs, lint, test]
    runs-on: ubuntu-latest
    steps:
    - name: Decide whether the needed jobs succeeded or failed
      uses: re-actors/alls-green@release/v1
      with:
        jobs: ${{ toJSON(needs) }}

  deploy:
    name: Deploy
    needs: check
    environment: release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install dependencies
      run:
        python -m pip install -U pip wheel setuptools build twine
    - name: Build dists
      run: |
        python -m build
    - name: Make Release
      uses: aio-libs/create-release@v1.6.6
      with:
        changes_file: CHANGES.rst
        name: aiojobs
        version_file: aiojobs/__init__.py
        github_token: ${{ secrets.GITHUB_TOKEN }}
        pypi_token: ${{ secrets.PYPI_TOKEN }}
        dist_dir: dist
        fix_issue_regex: "`#(\\d+) <https://github.com/aio-libs/aiojobs/issues/\\1>`"
        fix_issue_repl: "(#\\1)"
